
# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    tags: [ '*' ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        # we don't know what commit the last tag was
        fetch-depth: 0

    - name: Force fetch of tags
      run: git fetch --tags --force origin 

    - name: Set up JDK 19
      uses: actions/setup-java@v3
      with:
        java-version: '19'
        distribution: 'zulu'
        cache: maven
    
    - name: Generate settings.xml for Maven Builds
      uses: whelk-io/maven-settings-xml-action@v21
      with:
#        servers: '[{ "id": "github", "username": "yaytay", "password": "${{ secrets.GITHUB_TOKEN }}" },{ "id": "github-params4j", "username": "yaytay", "password": "${{ secrets.READPACKAGESPAT }}" }]'      
#        repositories: '[{"id":"central", "url":"https://repo1.maven.org/maven2"}, {"id":"github-params4j", "url":"https://maven.pkg.github.com/Yaytay/params4j", "snapshots":{"enabled":true}}]'
        servers: '[{ "id": "github", "username": "yaytay", "password": "${{ secrets.GITHUB_TOKEN }}" }]'
        repositories: '[{"id":"central", "url":"https://repo1.maven.org/maven2"}]'
    
    - name: Build with Maven
      env:
        JAVA_OPTS: -Djava.security.manager=allow
        MAVEN_OPTS: -Djava.security.manager=allow
      run: mvn -P ui -B clean install site

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
          
    - name: Deploy container image
      run: |
        IFS=' ' read -ra PARTS <<< `docker image ls | grep query-engine | grep -v design-mode | grep -v ghcr` && \
        docker tag ${PARTS[2]} ghcr.io/yaytay/${PARTS[0]}:${PARTS[1]} && \
        docker push ghcr.io/yaytay/${PARTS[0]}:${PARTS[1]}
        IFS=' ' read -ra PARTS <<< `docker image ls | grep query-engine-design-mode | grep -v ghcr` && \
        docker tag ${PARTS[2]} ghcr.io/yaytay/${PARTS[0]}:${PARTS[1]} && \
        docker push ghcr.io/yaytay/${PARTS[0]}:${PARTS[1]}
        

    - name: Upload site reports on success
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: reports
        path: |
          query-engine/target/site
          query-engine-design-mode/target/site
